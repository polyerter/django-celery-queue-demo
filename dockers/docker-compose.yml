version: "3.8"

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

services:
  workspace:
    build:
      context: ${APP_CODE_PATH_HOST}
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    restart: always
    volumes:
      - ${APP_CODE_PATH_HOST}/:/usr/src/app/
    environment:
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
    ports:
      - "${WORKSPACE_PORT}:8000"
    depends_on:
      - redis
    networks:
      - backend

  worker-1:
    &worker-base
    build:
      context: ${APP_CODE_PATH_HOST}
      dockerfile: Dockerfile
    image: ${CELERY_IMAGE_NAME:-celery-worker:latest}
    command: celery -A app worker -l INFO --concurrency=3
    volumes:
      - ${APP_CODE_PATH_HOST}:/usr/src/app/
    environment:
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
    depends_on:
      - redis
    networks:
      - backend

  worker-light:
    <<: *worker-base
    command: celery -A app worker -l INFO --concurrency=3 -Q light

  worker-3:
    <<: *worker-base
    command: celery -A app worker -l INFO --concurrency=3 -Q light,celery

  redis:
    image: redis:8.0.3
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  dashboard:
    image: mher/flower:0.9.7
    command: flower
    ports:
      - ${DASHBOARD_FLOWER_PORT}:5555
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    #      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - redis
    networks:
      - backend
